```
# Python program for implementing BFS

from collections import deque

def bfs(graph, root):
    visited = set()
    queue = deque([root])
    visited.add(root)

    while queue:
        node = queue.popleft()
        print(node, end=" ")

        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

bfs(graph, 'A')
``` ```
# Python program for implementing DFS

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)] for row in range(vertices)]

    def DFS(self, vertex):
        visited = [False] * self.V
        self.DFS_util(vertex, visited)

    def DFS_util(self, vertex, visited):
        visited[vertex] = True
        print(vertex, end=" ")

        for i in range(self.V):
            if self.graph[vertex][i] == 1 and visited[i] == False:
                self.DFS_util(i, visited)

# Example usage
g = Graph(5)
g.graph = [[0, 1, 1, 0, 0],
           [1, 0, 0, 1, 1],
           [1, 0, 0, 0, 1],
           [0, 1, 0, 0, 0],
           [0, 1, 1, 0, 0]]

print("DFS traversal (starting from vertex 0):")
g.DFS(0)
``` ```
# Python code for a basic singly linked list
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        if not self.head:
            self.head = Node(data)
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = Node(data)

    def print_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

# Example usage
linked_list = LinkedList()
linked_list.insert('A')
linked_list.insert('B')
linked_list.insert('C')
linked_list.print_list()
``` ```
# Python code for a doubly linked list
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def insert(self, data):
        if not self.head:
            self.head = Node(data)
            self.tail = self.head
        else:
            new_node = Node(data)
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

# Example usage
doubly_linked_list = DoublyLinkedList()
doubly_linked_list.insert('A')
doubly_linked_list.insert('B')
doubly_linked_list.insert('C')
doubly_linked_list.print_list()
``` ```
# Python code for a circularly linked list
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class CircularlyLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, data):
        if not self.head:
            self.head = Node(data)
            self.head.next = self.head
        else:
            current = self.head
            while current.next != self.head:
                current = current.next
            current.next = Node(data)
            current.next.next = self.head

    def print_list(self):
        current = self.head
        while True:
            print(current.data)
            current = current.next
            if current == self.head:
                break

# Example usage
circularly_linked_list = CircularlyLinkedList()
circularly_linked_list.insert('A')
circularly_linked_list.insert('B')
circularly_linked_list.insert('C')
circularly_linked_list.print_list()
``` 